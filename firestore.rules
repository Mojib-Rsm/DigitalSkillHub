
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }

    match /history/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }

    match /courses/{courseId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /blog/{postId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /jobs/{jobId} {
        allow read: if true;
        allow write: if request.auth != null; // Allow logged in users to post jobs
    }

    match /pricing/{planId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /testimonials/{testimonialId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /tools/{toolId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /notifications/{notificationId} {
        allow read: if request.auth != null; // All logged in users can read
        allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create
        allow update, delete: if false; // Notifications are immutable
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
