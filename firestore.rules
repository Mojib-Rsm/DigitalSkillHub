
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user's UID matches the document's uid field
    function isOwner(resource) {
      return request.auth.uid == resource.data.uid;
    }

    // Publicly readable collections
    match /courses/{courseId} {
      allow read: if true;
      allow write: if false; // Nobody can write
    }

    match /blog/{postId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /jobs/{jobId} {
      allow read: if true;
      allow write: if false;
    }

    match /pricing/{planId} {
        allow read: if true;
        allow write: if false;
    }

    match /testimonials/{testimonialId} {
        allow read: if true;
        allow write: if false;
    }
    
    // Users can only manage their own documents
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if isAuthenticated(); // Any authenticated user can create their own user doc
    }
    
    // History can only be created and read by the owner
    match /history/{historyId} {
      allow read: if isAuthenticated() && isOwner(get(path));
      allow create: if isAuthenticated() && isOwner(request.resource);
      allow update, delete: if false; // Nobody can update or delete history
    }
  }
}
