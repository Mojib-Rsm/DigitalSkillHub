rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Public collections (read-only for anyone)
    match /courses/{courseId} {
      allow read: if true;
      allow write: if false;
    }

    match /blog/{blogId} {
      allow read: if true;
      allow write: if false;
    }

    match /jobs/{jobId} {
      allow read: if true;
      allow write: if false;
    }

    match /testimonials/{testimonialId} {
        allow read: if true;
        allow write: if false;
    }
    
    match /pricing/{planId} {
        allow read: if true;
        allow write: if false;
    }

    // User-specific collections
    match /users/{userId} {
      // Allow a user to read and update their own document
      allow read, update: if request.auth.uid == userId;
      // Admins can read any user document
      allow get: if request.auth.uid != null && isAdmin(request.auth.uid);
      // Only admins can list all users
      allow list: if request.auth.uid != null && isAdmin(request.auth.uid);
      // Only admins can change a user's role
      allow update: if request.auth.uid != null && isAdmin(request.auth.uid) && 'role' in request.resource.data;

      // Prevent users from being created or deleted directly from the client
      allow create, delete: if false;
    }
    
    match /history/{historyId} {
      // Allow users to create their own history records
      allow create: if request.auth.uid == request.resource.data.uid;
      // Allow users to read their own history records
      allow read: if request.auth.uid == resource.data.uid;
      // Prevent updating or deleting history
      allow update, delete: if false;
    }
    
    // Seeding status (only allow admin to write to it)
     match /seed/status {
      allow read: if request.auth.uid != null;
      // Allow write only if user is an admin
      allow write: if request.auth.uid != null && isAdmin(request.auth.uid);
    }

  }
}
